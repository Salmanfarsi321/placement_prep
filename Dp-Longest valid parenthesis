Given a string A containing just the characters ’(‘ and ’)’.

Find the length of the longest valid (well-formed) parentheses substring.
Input 1:
    A = "(()"
Output 1:
    2
    Explanation 1:
        The longest valid parentheses substring is "()", which has length = 2.

Input 2:
    A = ")()())"
Output 2:
    4
    Explanation 2:
        The longest valid parentheses substring is "()()", which has length = 4.
        
int Solution::longestValidParentheses(string A) {
    stack<int>stk;
    int n=A.size();
    int dp[n];
    memset(dp,0,sizeof(dp));
    int mx=0;
    for(int i=0;i<A.size();i++){
        if(A[i]==')' && stk.empty()) continue;
        if(A[i]=='(') stk.push(i);
        if(A[i]==')' && !stk.empty()){
            int temp=i-stk.top()+1;
            stk.pop();
            dp[i]=temp;
            if(i>=temp)
            dp[i]+=dp[i-temp];
            mx=max(mx,dp[i]);
        }
    }
    return mx;
}
