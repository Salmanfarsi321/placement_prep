Given an expression, A, with operands and operators (OR , AND , XOR), in how many ways can you evaluate the expression to true, by grouping in different ways?

Operands are only true and false.

Return the number of ways to evaluate the expression modulo 103 + 3.

Input 1:
    A = "T|F"

Output 1:
    1

Explanation 1:
    The only way to evaluate the expression is:
        => (T|F) = T 

Input 2:
    A = "T^T^F"
    
Output 2:
    0
    
Explanation 2:
    There is no way to evaluate A to a true statement.

//Memoized dp solution
const int mod=1e3+3;
int dp[1000][1000][2];

int solve(string s,int i,int j,bool istrue){
    if(i>j) return false;
    if(i==j){
        if(istrue==true) return s[i]=='T';
        else
            return s[i]=='F';
    }
    int val=(istrue==true) ? 1:0;
    if(dp[i][j][val]!=-1) return dp[i][j][val];
    int ans=0;
    for(int k=i+1;k<=j-1;k+=2){
        int lt=solve(s,i,k-1,true);
        int lf=solve(s,i,k-1,false);
        int rt=solve(s,k+1,j,true);
        int rf=solve(s,k+1,j,false);
        if(s[k]=='&'){
            if(istrue==true) ans+=lt*rt;
            else
            ans+=lf*rt+lt*rf+lf*rf;
        }
        else if(s[k]=='|'){
            if(istrue==true) ans+=lt*rt+lt*rf+lf*rt;
            else
            ans+=lf*rf;
        }
        else if(s[k]=='^'){
            if(istrue==true)
                ans+=lf*rt+lt*rf;
            else
                ans+=lt*rt+lf*rf;
        }
    }
    return dp[i][j][val]=ans%mod;
}

int Solution::cnttrue(string A) {
    int n=A.size();
    memset(dp,-1,sizeof(dp));
    return solve(A,0,n-1,true);
}
