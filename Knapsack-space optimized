1st approach

int knapsack(int val[],int wt[],int n,int W){
    int dp[2][W+1];
    memset(dp,0,sizeof(dp));
    int i=0;
    while(i<n){
      if(i%2!=0){
          for(int j=1;j<=W;j++){
          if(j>=wt[i])
          dp[1][j]=max(val[i]+dp[0][j-wt[i]],dp[0][j]);
          else
          dp[1][j]=dp[0][j];
          }
      else{
          for(int j=1;j<=W;j++){
          if(j>=wt[i])
          dp[0][j]=max(val[i]+dp[1][j-wt[i]],dp[1][j]);
          else
          dp[0][j]=dp[1][j];
      }
      i++;
    }
 }
Time complexity:O(n*W)
space complexity:O(2*W)

 
 2nd approach
 
 int KnapSack(int val[], int wt[], int n, int W) 
{ 
    int dp[W+1];
    memset(dp, 0, sizeof(dp)); 
    for(int i=0; i < n; i++)  
        //traverse dp array from right to left 
        for(int j=W; j>=wt[i]; j--) 
            dp[j] = max(dp[j] , val[i] + dp[j-wt[i]]); 
    /*above line finds out maximum of  dp[j](excluding ith element value) 
      and val[i] + dp[j-wt[i]] (including ith element value and the 
      profit with "KnapSack capacity - ith element weight") */    
    return dp[W]; 
} 
