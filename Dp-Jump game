Q1->Given an array of non-negative integers, A, of length N, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Return the minimum number of jumps required to reach the last index.

If it is not possible to reach the last index, return -1.

1st approach-> Greedy approach
Time complexity-O(n)

int Solution::jump(vector<int> &A) {
    int n=A.size();
     if (n <= 1) 
        return 0; 
  
    // Return -1 if not possible to jump 
    if (A[0] == 0) 
        return -1; 
  
    // initialization 
    int maxReach = A[0];  // stores all time the maximal reachable index in the array. 
    int step = A[0];      // stores the number of steps we can still take 
    int jump =1;//stores the number of jumps necessary to reach that maximal reachable position. 
  
    // Start traversing array 
    int i=1; 
    for (i = 1; i < n; i++) 
    { 
        // Check if we have reached the end of the array 
        if (i == n-1) 
            return jump; 
  
        // updating maxReach 
        maxReach = max(maxReach, i+A[i]); 
  
        // we use a step to get to the current index 
        step--; 
  
        // If no further steps left 
        if (step == 0) 
        { 
            // we must have used a jump 
            jump++; 
  
            // Check if the current index/position or lesser index 
            // is the maximum reach point from the previous indexes 
            if(i >= maxReach) 
                return -1; 
  
            // re-initialize the steps to the amount 
            // of steps to reach maxReach from position i. 
            step = maxReach - i; 
        } 
    } 
  
    return -1; 
}

2nd approach-Dp solution (time complexity->O(n*n) )

Solution::jump(vector<int> &A) {
    int n=A.size();
    int dp[n];
    dp[0]=0;
    for(int i=1;i<n;i++){
        dp[i]=INT_MAX;
        for(int j=0;j<i;j++){
            if(i<=j+A[j] && dp[j]!=INT_MAX)
            dp[i]=min(dp[i],dp[j]+1);
        }
    }
    if(dp[n-1]==INT_MAX) return -1;
    return dp[n-1];
}

