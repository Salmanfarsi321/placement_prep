Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used ONCE in the combination.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
Example :

Given candidate set 10,1,2,7,6,1,5 and target 8,

A solution set is:

[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6]


void solve(int i, vector<int> row, vector<vector<int> >& res, vector<int> A, int B)
{
    if(B<0) 
    return;
    if (B==0){
        sort(row.begin(),row.end());
        res.push_back(row);
        return;
    }
    if(i>=A.size())
    return;
    row.push_back(A[i]);
    solve(i+1,row,res,A,B-A[i]);
    row.pop_back();
    solve(i+1,row,res,A,B);
}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    vector<vector<int> > res;
    sort(A.begin(), A.end());
    solve(0, vector<int>(), res, A, B);
    res.erase(unique(res.begin(),res.end()),res.end());
    return res;
}
