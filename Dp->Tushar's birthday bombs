It’s Tushar’s birthday today and he has N friends.

Friends are numbered [0, 1, 2, …., N-1] and i-th friend have a positive strength B[i].

Today being his birthday, his friends have planned to give him birthday bombs (kicks :P).

Tushar’s friends know Tushar’s pain bearing limit and would hit accordingly.

If Tushar’s resistance is denoted by A (>=0) then find the lexicographically smallest order of friends to kick Tushar so that the cumulative kick strength (sum of the strengths of friends who kicks) doesn’t exceed his resistance capacity and total no. of kicks hit are maximum.

Also note that each friend can kick unlimited number of times (If a friend hits x times, his strength will be counted x times)

Return the lexicographically smallest array of maximum length where the ith index represents the index of the friend who will hit.

Greedy works better in this problem.

1.Greedy approach -> O(n) time complexity

Explanation: First, we find the index(mn_idx in below code) with minimum strength to maximize kicks.
Then we see if there is a person with strength with lower index than what we found and push that in our ans array.
we then simultaneously add all values and update our mx_sum as we are iterating in the loop with this logic until our 
A becomes less than B[index].

vector<int> Solution::solve(int A, vector<int> &B) {
   int mn_idx=min_element(B.begin(),B.end())-B.begin();
   int temp=A/B[mn_idx];
   int mx_sum=B[mn_idx]*temp;
   vector<int>ans(temp,mn_idx);
   int c=0,i=0;
    while(c<temp && i<mn_idx){
        int curr_sum=mx_sum-B[ans[c]]+B[i];
        if(curr_sum>mx_sum && curr_sum<=A){
               ans[c++]=i;
               mx_sum=curr_sum;
        }
       else
       i++;
   }
   return ans;
}

2-> Dp approach -> O(A*B.size())

vector<int> Solution::solve(int A, vector<int> &B) {
    reverse(B.begin(), B.end());
    int n = B.size();
    vector<vector<int>> dp(A + 1, vector<int>(n + 1, 0));
    vector<vector<bool>> selected(A + 1, vector<bool>(n + 1, false));
 
    for(int i = 1; i <= A; i++) {
        for(int j = 1; j <= n; j++) {
            if(B[j - 1] <= i) {
                int cur = 1 + dp[i - B[j - 1]][j];
                int prev = dp[i][j - 1];
                if(cur >= prev) {
                    dp[i][j] = cur;
                    selected[i][j] = true;
                }
                else {
                    dp[i][j] = dp[i][j - 1];
                }
            }
            else {
                dp[i][j] = dp[i][j - 1];
            }
        }
    }
 
    vector<int> result;
    int i = A, j = n;
    while(i != 0 && j != 0) {
        if(selected[i][j]) {
            result.push_back(n - j);
            i -= B[j - 1];
        }
        else {
            j--;
        }
    }
 
    return result;
}
