ou are given a set of coins S. In how many ways can you make sum N assuming you have infinite amount of each coin in the set.

Note : Coins in set S will be unique. Expected space complexity of this problem is O(N).

-----------------------Accepted solution------------------
const int mod=1e6+7;
 
int Solution::coinchange2(vector<int> &A, int B) {
    int n=A.size();
    int W=B;
    int dp[W+1];
    memset(dp,0,sizeof(dp));
    dp[0]=1;
    for(int i=0;i<n;i++){
        for(int j=A[i];j<=W;j++){
            dp[j]+=dp[j-A[i]];
            dp[j]%=mod;
        }
    }
    return dp[W];
}

--------------correct but not space efficient,verdict-RTE-----------------
const int mod=1e6+7;
 
int Solution::coinchange2(vector<int> &A, int B) {
    int n=A.size();
    int W=B;
    int dp[n+1][W+1];
    memset(dp,0,sizeof(dp));
    for(int i=0;i<=n;i++) dp[i][0]=1;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=W;j++){
            if(A[i-1]<=j)
            dp[i][j]=dp[i][j-A[i-1]]+dp[i-1][j];
            else
            dp[i][j]=dp[i-1][j];
            dp[i][j]%=mod;
        }
    }
    return dp[n][W]%mod;
}
