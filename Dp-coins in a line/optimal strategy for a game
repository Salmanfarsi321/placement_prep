There are A coins (Assume A is even) in a line.

Two players take turns to take a coin from one of the ends of the line until there are no more coins left.

The player with the larger amount of money wins.

Assume that you go first.

Return the maximum amount of money you can win.

Input 1:
    A = [1, 2, 3, 4]

Output 1:
    6

Explanation 1:
    
    You      : Pick 4
    Opponent : Pick 3
    You      : Pick 2
    Opponent : Pick 1
    
    Total money with you : 4 + 2 = 6

Input 2:
    A = [5, 4, 8, 10]
    
Output 2:
    15

Explanation 2:

    You      : Pick 10
    Opponent : Pick 8
    You      : Pick 5
    Opponent : Pick 4
    
    Total money with you : 10 + 5 = 15


//-----------------------------Memoized dp solution----------------------------------------------------------
int solve(vector<int> &A,vector<vector<int> >&dp,int i,int j){
    if(i==j) return A[i];
    if(i+1==j) return max(A[i],A[j]);
    if(dp[i][j]!=-1) return dp[i][j];
    int temp=max(A[i]+min(solve(A,dp,i+2,j),solve(A,dp,i+1,j-1)),
                 A[j]+min(solve(A,dp,i+1,j-1),solve(A,dp,i,j-2)));
    return dp[i][j]=temp;
}

int Solution::maxcoin(vector<int> &A) {
    int n=A.size();
    vector<vector<int> >dp(n+1,vector<int>(n+1,-1));
    return solve(A,dp,0,n-1);
}
