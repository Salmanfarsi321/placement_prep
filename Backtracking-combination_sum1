/*Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The combinations themselves must be sorted in ascending order.
CombinationA > CombinationB iff (a1 > b1) OR (a1 = b1 AND a2 > b2) OR … (a1 = b1 AND a2 = b2 AND … ai = bi AND ai+1 > bi+1)
The solution set must not contain duplicate combinations.
Example,
Given candidate set 2,3,6,7 and target 7,
A solution set is:
[2, 2, 3]
[7]
*/
void solve(vector<int>&A,int B,vector<int>&row,vector<vector<int>>&res,int i){
    if(B==0){
        res.push_back(row);
        return;
    }
    if(i==A.size() || B<0)
    return;
    row.push_back(A[i]);
    solve(A,B-A[i],row,res,i);
    row.pop_back();
    solve(A,B,row,res,i+1);
}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    vector<vector<int> >res;
    vector<int>row,a;
    sort(A.begin(),A.end());
    a.push_back(A[0]);
    for(int i=1;i<A.size();i++){
        if(A[i-1]!=a[a.size()-1]);
        a.push_back(A[i]);
    }
    solve(a,B,row,res,0);
    res.erase(unique(res.begin(),res.end()),res.end());
    sort(res.begin(),res.end());
    return res;
}
