You are given a sorted array consisting of only integers where every element appears exactly twice,
except for one element which appears exactly once. Find this single element that appears only once.
Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 
//Binary search ,O(n*logn) 
int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        int lo=0;
        int hi=n-1;
        while(lo+1<hi){
            int mid
                =(lo+(hi-lo)/2);
            if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1])
                return nums[mid];
            //actually mid is at odd index (0 indexing)
            if(mid%2==0){
                if(nums[mid-1]==nums[mid])
                    hi=mid;
                else
                    lo=mid;
            }   
            else{
                if(nums[mid-1]==nums[mid])
                    lo=mid+1;
                else
                    hi=mid-1;
            }
        }
        return nums[lo];
    }
