bool issafe(vector<string>&temp,int row,int col,int n){
    for(int i=0;i<row;i++){
        if(temp[i][col]=='Q') 
        return false;
    }
    for(int i=row,j=col;i>=0 && j>=0;i--,j--){
        if(temp[i][j]=='Q') 
        return false;
    }
    for(int i=row,j=col;i>=0 && j<n;i--,j++){
        if(temp[i][j]=='Q') 
        return false;
    }
    return true;
} 

void solve(int row,vector<vector<string>>&res,vector<string>&temp,int n){
    if(row==n){
        res.push_back(temp);
        return;
    }
    for(int col=0;col<n;col++){
        if(issafe(temp,row,col,n)){
            temp[row][col]='Q';
            solve(row+1,res,temp,n);
            temp[row][col]='.';
        }
    }
}

vector<vector<string> > Solution::solveNQueens(int A) {
    vector<vector<string> >res;
    if(A==2 || A==3) return res;
    string s(A,'.');
    vector<string>temp(A,s);
    solve(0,res,temp,A);
    return res;
}
