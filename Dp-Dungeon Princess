The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).

In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.

For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path

RIGHT-> RIGHT -> DOWN -> DOWN.

Dungeon Princess: Example 1
-2  -3   3
-5  -10  1
10   30  5

-----------------------------------------------------------------solution------------------------------------------------------------

/*Best problem on matrix dp
start from the bottom left A[n-1][m-1] and move to the top A[0][0]
do once on the paper
EXPLANATION-> minimum points needed to leave cell (i, j) (remember we are moving from bottom to up). 
There are only two paths to choose: (i+1, j) and (i, j+1).
Of course we will choose the cell that the player can finish the rest of his journey with a smaller initial points.
Therefore we have: min_Points_on_exit = min(dp[i+1][j], dp[i][j+1])
dp[i][j] = max(min_Points_on_exit – points[i][j], 1)*/

int Solution::calculateMinimumHP(vector<vector<int> > &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n=A.size();
    int m=A[0].size();
    int dp[n][m];
    
    dp[n-1][m-1]=(A[n-1][m-1]>0) ? 1: abs(A[n-1][m-1])+1;
    
    for(int i=n-2;i>=0;i--)
    dp[i][m-1]=max(dp[i+1][m-1]-A[i][m-1],1);
    
    for(int i=m-2;i>=0;i--)
    dp[n-1][i]=max(dp[n-1][i+1]-A[n-1][i],1);
    
    for(int i=n-2;i>=0;i--){
        for(int j=m-2;j>=0;j--){
            dp[i][j]=max(min(dp[i+1][j],dp[i][j+1])-A[i][j],1);
        }
    }
    return dp[0][0];
}
