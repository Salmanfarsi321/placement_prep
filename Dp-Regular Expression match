Implement wildcard pattern matching with support for ‘?’ and ‘*’ for strings A and B.

’?’ : Matches any single character.
‘*’ : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Time complexity->O(min(m,n))
Space complexity->O(1)

int Solution::isMatch(const string A, const string B) {
    int n=A.size();
    int m=B.size();
    if(n==0 && m==0) return true;
    int i=0,j=0,i_idx=-1,j_idx=-1;
    while(i<n){
        if(A[i]==B[j] || B[j]=='?'){
            i++;
            j++;
        }
        else if(B[j]=='*'){
            i_idx=i;
            j_idx=j;
            j++;
        }
        else if(j_idx!=-1){
            i=i_idx+1;
            j=j_idx+1;
            i_idx++;
        }
        else
        return false;
    }
    while(j<m && B[j]=='*') j++;
    if(j==m) return true;
    return false;
}
